class TextInput{constructor(t){this.toggleClearButton=this.toggleClearButton.bind(this),this.clearInput=this.clearInput.bind(this),this.rootElem=observeNodeBeforeInit(t),this.input=this.rootElem.querySelector("input.text-input__input"),this.wrapper=this.rootElem.querySelector(".text-input__wrapper"),this.autocompleteList=this.rootElem.querySelector(".text-input__autocomplete"),this.clearButton=this.rootElem.querySelector(".text-input__close-icon"),this.clearButton&&(this.clearButton.type="button"),this.toggleClearButton(),this.input.addEventListener("input",this.toggleClearButton),this.clearButton.addEventListener("click",this.clearInput),this.autocompleteList&&this.initAutocomplete()}initAutocomplete(){this.autocompleteList.classList.add("__removed"),this.input.addEventListener("input",(()=>{this.input.value.length>0?this.toggleAutocompleteList(!0):this.toggleAutocompleteList(!1)})),this.input.addEventListener("blur",(()=>this.toggleAutocompleteList(!1)))}toggleAutocompleteList(t=!1){t&&(this.rootElem.ariaExpanded=!0,this.autocompleteList.classList.remove("__removed")),t||(this.rootElem.ariaExpanded=!1,this.autocompleteList.classList.add("__removed"))}toggleClearButton(){this.input.value.length<1?this.clearButton.classList.add("__removed"):this.clearButton.classList.remove("__removed")}clearInput(){this.input.value="",this.input.dispatchEvent(new Event("input"))}}class Dropdown{constructor(t){this.toggleList=this.toggleList.bind(this),this.onDocumentClick=this.onDocumentClick.bind(this),this.onRadioChange=this.onRadioChange.bind(this),this.rootElem=observeNodeBeforeInit(t),this.button=this.rootElem.querySelector(".dropdown__button"),this.list=this.rootElem.querySelector(".dropdown__list"),this.radioButtons=Array.from(this.list.querySelectorAll("input[type='radio']")),this.text=this.rootElem.querySelector(".dropdown__text"),this.toggleList(!1),this.button.addEventListener("click",this.toggleList),document.addEventListener("click",this.onDocumentClick),this.radioButtons.forEach((t=>t.addEventListener("change",this.onRadioChange)))}toggleList(t="define"){if(!this.button.disabled){if("boolean"!=typeof t){const t=this.rootElem.classList.contains("__shown");this.toggleList(!t)}"boolean"==typeof t&&(t&&this.rootElem.classList.add("__shown"),t||this.rootElem.classList.remove("__shown"))}}onDocumentClick(t){t.target!==this.button&&!t.target.closest(".dropdown__button")&&this.toggleList(!1)}destroy(){this.button.removeEventListener("click",this.toggleList),document.removeEventListener("click",this.onDocumentClick)}onRadioChange(t){const e=t.target.value;this.text.innerHTML=e}}class JobsFilter{constructor(t){this.init=this.init.bind(this),this.rootElem=observeNodeBeforeInit(t),this.namePrefix=this.rootElem.dataset.filterNameprefix||"",this.groupsContainer=this.rootElem.querySelector(".jobs-filter__groups"),this.groupsNodes=this.groupsContainer.querySelectorAll("[data-jobfilter-name]"),this.renderDropdowns().then(this.init)}renderDropdowns(){return t=t.bind(this),i=i.bind(this),e=e.bind(this),new Promise((o=>{loadData(`${rootPath}json/filter-values.json`).then((s=>{this.groupsNodes.forEach((n=>{const r=n.querySelector(".jobs-filter__group-list"),a=s.find((t=>t.name===n.dataset.jobfilterName));switch(a.type){case"checkbox":default:Array.isArray(a.values)?e(a,r):t(a,n);break;case"radio":i(a,r)}o()}))}))}));function t(t,e){const i=`\n            <input class="${t.noCount?"__no-count":""}" type="checkbox" name="${this.namePrefix}${t.name}" id="${this.namePrefix}${t.name}"\n            value="${t.value}">\n            <label class="checkbox__value icon-checkbox" for="${this.namePrefix}${t.name}">\n                ${t.value}\n            </label>\n            `;e.insertAdjacentHTML("afterbegin",i)}function e(t,e){t.values.forEach(((i,o)=>{const s=`\n                <li class="jobs-filter__group-item">\n                    <div class="checkbox">\n                        <input class="${i.noCount?"__no-count":""}" type="checkbox" name="${this.namePrefix}${t.name}"\n                            id="${this.namePrefix}${t.name}-${o+1}" value="${i.title}">\n                        <label\n                            class="jobs-filter__label checkbox__value icon-checkbox"\n                            for="${this.namePrefix}${t.name}-${o+1}">\n                            ${i.title}\n                            <span\n                                class="jobs-filter__group-item-count badge badge--small">${i.amount}</span>\n                        </label>\n                    </div>\n                </li>\n                `;e.insertAdjacentHTML("beforeend",s)}))}function i(t,e){t.values.forEach(((i,o)=>{const s=`\n                <li class="jobs-filter__group-item">\n                    <label class="jobs-filter__label radio-button">\n                        <input class="radio-button__input ${i.noCount?"__no-count":""}" type="radio" ${0==o?"checked":""} name="${this.namePrefix}${t.name}"\n                            value="${i.title}" id="${t.name}-${o}">\n                        <svg width="20" height="20" viewBox="0 0 23 23">\n                            <circle cx="10" cy="10" r="9"></circle>\n                            <path\n                                d="M10,7 C8.34314575,7 7,8.34314575 7,10 C7,11.6568542 8.34314575,13 10,13 C11.6568542,13 13,11.6568542 13,10 C13,8.34314575 11.6568542,7 10,7 Z"\n                                class="radio-button__inner"></path>\n                            <path\n                                d="M10,1 L10,1 L10,1 C14.9705627,1 19,5.02943725 19,10 L19,10 L19,10 C19,14.9705627 14.9705627,19 10,19 L10,19 L10,19 C5.02943725,19 1,14.9705627 1,10 L1,10 L1,10 C1,5.02943725 5.02943725,1 10,1 L10,1 Z"\n                                class="radio-button__outer"></path>\n                        </svg>\n                        <span class="jobs-filter__group-item-text">\n                            ${i.title}\n                        </span>\n                        <span class="jobs-filter__group-item-count badge badge--small">${i.amount}</span>\n                    </label>\n                </li>\n                `;e.insertAdjacentHTML("beforeend",s)}))}}init(){document.dispatchEvent(new Event("filterRendered"));const t=Array.from(this.rootElem.querySelectorAll(".jobs-filter__dropdown"));this.groupsData=t.map((t=>{const e=t.querySelectorAll("input[type='checkbox']"),i=t.querySelectorAll("input[type='radio']"),o=Array.from(e).concat(Array.from(i)),s=t.querySelector(".jobs-filter__group-button");return{group:t,inputButtons:o,groupButton:s,checkedInputs:[]}})),this.initGroupsData(),this.initAllInputs()}initGroupsData(){function t(t){const e=t.inputButtons.filter((t=>t.checked));t.checkedInputs=e.filter((t=>!t.classList.contains("__no-count"))),this.setValues(t)}t=t.bind(this),this.groupsData.forEach((e=>{t(e),this.setValues(e),e.inputButtons.forEach((i=>{i.addEventListener("change",(()=>t(e)))}))}))}initAllInputs(){const t=this.rootElem.querySelectorAll("input[type='checkbox']"),e=this.rootElem.querySelectorAll("input[type='radio']");Array.from(t).concat(Array.from(e)).forEach((t=>t.addEventListener("change",this.setFilterShowAmount.bind(this))));const i=this.rootElem.querySelector(".jobs-filter__button");if(!i)return;let o=i.querySelector(".badge");if(!o){o=createElement("span","jobs-filter__badge badge"),i.append(o);new MutationObserver((()=>{i.classList.contains("__show-more-active")?o.classList.add("__removed"):"0"!=o.innerHTML&&o.classList.remove("__removed")})).observe(i,{attributes:!0})}this.setFilterShowAmount()}setValues(t){const e=t.checkedInputs.length;let i=t.groupButton.querySelector(".badge");i||(i=createElement("span","jobs-filter__badge badge"),t.groupButton.append(i)),i.innerHTML=e,e<1?i.classList.add("__removed"):i.classList.remove("__removed")}setFilterShowAmount(){const t=this.rootElem.querySelector(".jobs-filter__button");if(!t)return;const e=Array.from(this.rootElem.querySelectorAll("input[type='checkbox']")),i=Array.from(this.rootElem.querySelectorAll("input[type='radio']")),o=e.concat(i).filter((t=>t.checked&&!t.classList.contains("__no-count"))).length,s=t.querySelector(".badge");s&&(s.innerHTML=o,o<1&&s.classList.add("__removed"))}}class JobsSearchForm{constructor(t){this.onLocationInput=this.onLocationInput.bind(this),this.rootElem=observeNodeBeforeInit(t),this.keywordsContainer=this.rootElem.querySelector(".jobs-search-form__search-input"),this.proximityContainer=this.rootElem.querySelector(".jobs-search-form__proximity-container"),this.radiusContainer=this.rootElem.querySelector(".jobs-search-form__proximity"),this.submitContainer=this.rootElem.querySelector(".jobs-search-form__submit-group"),this.keywordsInput=this.keywordsContainer.querySelector(".text-input__input"),this.locationInput=this.proximityContainer.querySelector(".text-input__input"),this.radiusButton=this.radiusContainer?this.radiusContainer.querySelector(".dropdown__button"):null,this.initMobileHiding(),this.onLocationInput(),this.locationInput.addEventListener("input",this.onLocationInput)}initMobileHiding(){this.keywordsInput.addEventListener("focus",(()=>{this.proximityContainer&&this.proximityContainer.classList.remove("__mobile-hidden"),this.submitContainer&&this.submitContainer.classList.remove("__mobile-hidden")}))}onLocationInput(){if(!this.radiusButton)return;this.locationInput.value.trim().length<1?this.radiusButton.setAttribute("disabled",""):this.radiusButton.removeAttribute("disabled")}}class ValidationForm{constructor(t){this.submit=this.submit.bind(this),this.formElementsKeys=["input"],this.rootElem=observeNodeBeforeInit(t),this.boxError=this.rootElem.querySelector(".info-box--error"),this.submitButton=this.rootElem.querySelector(".submit-button"),this.boxError.classList.add("__removed"),this.submitButton.addEventListener("click",this.submit)}submit(t){const e=inittedInputs.filter((t=>{let e=!1;return this.formElementsKeys.forEach((i=>{t[i]&&t[i].closest(".validation-form")===this.rootElem&&t[i]!==this.submitButton&&(e=!0)})),e})),i=[];e.forEach((t=>{t.validate(),0==t.isValid&&i.push(t)})),i.length>0&&t.preventDefault()}}class TextFormElement{constructor(t){this.validate=this.validate.bind(this),this.rootElem=observeNodeBeforeInit(t),this.label=this.rootElem.querySelector(".label"),this.input=this.rootElem.querySelector(".form-element__input"),this.validationMessage=this.rootElem.querySelector(".form-element__validation-message"),this.validationMessage.classList.add("__removed"),this.getValidationConditions()}getValidationConditions(){const t=this.input.dataset.validationMask;this.validationMask=!!t&&new RegExp(t);const e=this.input.dataset.validationLength;this.validationLength=!!e&&e.split(", ")}validate(){let t=!1;const e=this.input.value;if(this.validationMask&&(t=!!this.validationMask.test(e)),this.validationLength){const i=parseInt(this.validationLength[0]),o=parseInt(this.validationLength[1])||i;t=e>=i&&e<=o}this.setValidationState(t),this.input.addEventListener("input",this.validate)}setValidationState(t){this.isValid=t,t?this.validationMessage.classList.add("__removed"):this.validationMessage.classList.remove("__removed")}}class PasswordFormElement extends TextFormElement{constructor(t){super(t),this.onInput=this.onInput.bind(this),this.info=document.querySelector(".password-input__info"),this.info&&this.info.classList.add("__removed"),this.input.addEventListener("focus",(()=>this.info.classList.remove("__removed"))),this.input.addEventListener("input",this.onInput)}onInput(){const t=this.input.value;this.input.value=t.replace(/[\sа-яА-ЯёЁ]/,"")}validate(){let t=!1;const e=this.input.value,i=e.match(/\d/g)||[],o=e.match(/[a-z]/g)||[],s=e.match(/[A-Z]/g)||[],n=e.length>=8,r=i.length>0,a=o.length>0&&s.length>0;t=!!(n&&r&&a),this.input.addEventListener("input",this.validate),super.setValidationState(t)}}const inputSelectors=[{selector:".text-input",classInstance:TextInput},{selector:".dropdown",classInstance:Dropdown},{selector:".jobs-filter",classInstance:JobsFilter},{selector:".jobs-search-form",classInstance:JobsSearchForm},{selector:".validation-form",classInstance:ValidationForm},{selector:".form-element--text",classInstance:TextFormElement},{selector:".password-input",classInstance:PasswordFormElement}];doInit(inputSelectors),inittingSelectors=inittingSelectors.concat(inputSelectors);