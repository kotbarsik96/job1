class CreateTemplateBlock{constructor(e,t,l){s=s.bind(this),this.changeSlide=this.changeSlide.bind(this),this.onSlideChange=this.onSlideChange.bind(this),this.rootElem=document.querySelector(`${e}`),this.selector=e,this.otherParams={renderPosition:"start",name:""};for(let e in l)this.otherParams[e]=l[e];function s(){setTimeout((()=>{const e=new URL(window.location.href).searchParams.get(this.otherParams.name),t=this.sliderContainer.querySelector(`[data-steps-slider-value="${e}"]`).dataset.sliderSlideIndex;this.sliderInstance.slideTo(this.sliderContainer,t,!0),this.sliderContainer.removeEventListener("sliderinit",s)}),500)}this.renderPosition="start"===this.otherParams.renderPosition?"afterbegin":"beforeend",this.getParams(t).then((()=>{this.hasSlider=!Array.isArray(this.params),this.renderTemplateBlockBody(),this.hasSlider&&(this.sliderContainer=this.rootElem.querySelector(".slider"),this.sliderContainer.addEventListener("sliderinit",s))}))}getParams(e){return new Promise((t=>{e?"object"==typeof e?(this.params=e,t()):"string"==typeof e&&loadData(e).then((e=>{this.params=e,t()})):(this.params={},t())}))}renderTemplateBlockBody(){t=t.bind(this);const e=`\n            <div class="template-block__body">\n                ${function(){if(this.hasSlider){let e="";return this.params.controlItems.forEach((t=>{e+=`\n                    <li class="template-block__slide slider__slide" data-steps-slider-value="${t.value}">\n                        <img class="template-block__image"\n                            src="${this.otherParams.pathToImg}${t.value}/gray.jpg" alt="${this.otherParams.imgAlt}">\n                    </li>\n                    `})),`\n                <div class="template-block__slider slider">\n                    <ul class="template-block__slider-list slider__list">\n                        ${e}\n                    </ul>\n                </div>\n                `}return`\n                <div class="template-block__preview">\n                    <img src="${this.otherParams.pathToImg}" alt="${this.otherParams.imgAlt}" class="template-block__preview-image">\n                </div>\n                `}.call(this)}\n                ${function(){let e="";this.hasSlider&&(e+=this.getControls(this.params));return`\n                <div class="template-block__controls">\n                    ${e}\n                </div>\n            `}.call(this)}\n            </div>\n        `;function t(){this.sliderInstance=sliders.find((e=>e.sliders.includes(this.sliderContainer))),this.sliderContainer.removeEventListener("sliderinit",t)}this.rootElem.insertAdjacentHTML(this.renderPosition,e),this.hasSlider&&(this.mainControlsBlock=this.rootElem.querySelector(".template-block__controls-block"),this.mainControlsBlock.classList.add("template-block__controls--main"),this.mainControls=Array.from(this.mainControlsBlock.querySelectorAll("input[type='radio']")||[]),this.sliderContainer=this.rootElem.querySelector(".slider"),this.sliderContainer.addEventListener("sliderinit",t),setTimeout(t,150),this.mainControls.forEach((e=>{e.addEventListener("change",this.changeSlide);const t=e.nextElementSibling,l=()=>t.parentNode.querySelector("input").value===this.currentSlideRadio.value;t.addEventListener("mouseover",(()=>{l()||(console.log("over",t),this.changeSlide(null,e))})),t.addEventListener("mouseleave",(()=>{l()||(console.log("leave",t),this.currentSlideRadio.dispatchEvent(new Event("change")),this.returnSavedControlsChecks(),this.mainControlHover=!1)}))})),this.sliderContainer.addEventListener("slidechange",this.onSlideChange))}getControls(e){const t=e.type||"pill";let l;if("image"===t)l="template-block__images-list";else l="template-block__pills-list";let s="";return e.controlItems.forEach((l=>{"image"===t&&(s+=`\n                <li class="template-block__images-item">\n                    <input class="template-block__radio" id="${this.otherParams.name}-${e.controlName}-${l.value}" type="radio"\n                        name="${this.otherParams.name}-${e.controlName}" value="${l.value}">\n                    <label class="template-block__image-label" for="${this.otherParams.name}-${e.controlName}-${l.value}">\n                        <img src="${l.src}"\n                            alt="Превью - ${l.value}" class="template-block__images-img">\n                    </label>\n                </li>\n                `),"pill"===t&&(s+=`\n                <li class="template-block__pill">\n                    <input class="template-block__radio" id="${this.otherParams.name}-${e.controlName}-${l.value}"\n                        type="radio" name="${this.otherParams.name}-${e.controlName}" value="${l.value}">\n                    <label class="template-block__pill-label"\n                        for="${this.otherParams.name}-${e.controlName}-${l.value}">\n                        ${l.iconName?`<span class="template-block__pill-icon ${l.iconName}" style="${l.iconStyle}"></span>`:""}\n                        <span class="template-block__pill-text" style="${l.textStyle}">\n                            ${l.title}\n                        </span>\n                    </label>\n                </li>\n                `)})),`\n            <div class="template-block__controls-block">\n                <div class="template-block__controls-headline">\n                    <h3 class="template-block__controls-title">${e.controlTitle}:</h3>\n                    <p class="template-block__controls-name"></p>\n                </div>\n                <ul class="${l}">\n                    ${s}\n                </ul>\n            </div>\n        `}renderTemplateBlockControls(e=!1){if(this.hasSlider){let t="";this.params.controlItems.find((e=>e.value===this.mainValue)).options.forEach((e=>{t+=this.getControls(e)}));const l=Array.from(this.mainControlsBlock.parentNode.querySelectorAll(".template-block__controls-block:not(.template-block__controls--main)"));e&&(this.savedControlsChecks=[],l.forEach((e=>{let t=e.querySelector("input:checked");t||(t=e.querySelector("input"));const l=t.value,s=t.name;this.savedControlsChecks.push({name:s,value:l})}))),l.forEach((e=>e.remove())),this.mainControlsBlock.insertAdjacentHTML("afterend",t),this.controlBlocks=Array.from(this.mainControlsBlock.parentNode.querySelectorAll(".template-block__controls-block:not(.template-block__controls--main)")),this.controlBlocks.forEach((e=>{const t=e.querySelector("input");t.checked=!0,t.dispatchEvent(new Event("change"))}))}}returnSavedControlsChecks(){this.savedControlsChecks&&this.savedControlsChecks.forEach((e=>{const t=Array.from(this.rootElem.querySelectorAll(`input[name="${e.name}"]`)).find((t=>t.value===e.value));t&&(t.checked=!0,t.dispatchEvent(new Event("change")))}))}changeSlide(e,t=null){!t&&e&&(t=e.target);const l=t.value,s=this.sliderContainer.querySelector(`[data-steps-slider-value="${l}"]`),n=parseInt(s.dataset.sliderSlideIndex);this.mainValue=l,e?(this.currentSlideRadio=t,this.renderTemplateBlockControls(!1)):(this.mainControlHover=!0,t!==this.currentSlideRadio&&this.renderTemplateBlockControls(!0)),this.sliderInstance&&this.sliderInstance.slideTo(this.sliderContainer,n)}onSlideChange(e){if(this.mainControlHover)return;const t=e.detail.activeSlide;if(!t)return;const l=this.mainControls.find((e=>e.value===t.dataset.stepsSliderValue));l.checked=!0,l.dispatchEvent(new Event("change"))}}const createTemplateBlocks=[new CreateTemplateBlock(".resume-template",`${rootPath}json/resume-template.json`,{pathToImg:"/job1/img/create-resume/cv-templates/",imgAlt:"Шаблон резюме",name:"resume_template"})];